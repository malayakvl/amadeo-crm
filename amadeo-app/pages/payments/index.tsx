import Head from 'next/head';
import { getSession } from 'next-auth/client';
import React from 'react';
import { useTranslations } from 'next-intl';
import { PaymentInfo, PaymentMethods, ListTransactions } from '../../components/payments';
// import { accountService } from '../../_services';
// import SchedulePopup from '../../components/liveselling/SchedulePopup';
// import { showPopupAction } from '../../redux/livesessions';
// import { useDispatch } from 'react-redux';
// import { fetchScenariosAction } from '../../redux/livesessions';

export default function Payments({ session }: { session: any }) {
    if (!session) return <></>;
    const t = useTranslations();
    // const dispatch = useDispatch();

    // const fbSync = () => {
    //     accountService.syncFB();
    // };
    // useEffect(() => {
    //     dispatch(fetchScenariosAction());
    // }, []);

    return (
        <>
            <Head>
                <title>Amadeo CRM - Payments</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="block-white-8 mr-10 white-shadow-big">
                <PaymentInfo />
            </div>

            <div className="block-white-8 white-shadow-medium mt-8">
                <div className="flex">
                    <div className="w-80 p-4 bg-gray-100 rounded-lg shadow-inner">
                        <div className="font-bold text-gray-350 text-lg pb-4">
                            {t('Payment Methods')}
                        </div>
                            <PaymentMethods />
                    </div>

                    <div className="ml-8 flex-1">
                        <div className="mb-8 font-bold text-gray-350 text-lg py-4 border-b border-gray-200">
                            {t('Transactions')}
                        </div>

                        <ListTransactions />
                    </div>
                </div>
            </div>
        </>
    );
}

export async function getServerSideProps(context: any) {
    const { locale } = context;
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: { destination: `/${locale === 'fr' ? '' : `${locale}/`}auth/signin` }
        };
    }

    return {
        props: {
            session,
            locale,
            messages: {
                ...require(`../../messages/${locale}.json`)
            }
        }
    };
}
