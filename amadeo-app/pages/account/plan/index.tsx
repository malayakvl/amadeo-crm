import Head from 'next/head';
import { getSession } from 'next-auth/client';
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { userSelector, userSubscriptionSelector } from '../../../redux/user/selectors';
import { fetchUserSubscriptionAction } from '../../../redux/user';
import { unsubscribeAction } from '../../../redux/user/actions';
import moment from 'moment';
import getConfig from 'next/config';
const { publicRuntimeConfig } = getConfig();
const stripeKey = publicRuntimeConfig.stripeKey;
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe, StripeElementsOptions } from '@stripe/stripe-js';
import { CardForm } from '../../../components/checkout';
const stripePromise = loadStripe(stripeKey);

export default function Index({ session }: { session: any }) {
    if (!session) return <></>;
    const dispatch = useDispatch();

    const appearance: any = {
        theme: 'stripe'
    };
    const options: StripeElementsOptions = {
        appearance
    };

    const user = useSelector(userSelector);
    const subscriptionInfo = useSelector(userSubscriptionSelector);

    useEffect(() => {
        // Create PaymentIntent and Plan Price as soon as the page loads
        if (user?.email) {
            dispatch(fetchUserSubscriptionAction());
        }
    }, [user?.email]);

    const preparePeriod = () => {
        if (subscriptionInfo.trial_end && subscriptionInfo.status != 'active') {
            return `
                    ${moment.unix(subscriptionInfo.trial_start).format('DD-MM-YYYY')} - ${moment
                .unix(subscriptionInfo.trial_end)
                .format('DD.MM.YYYY')}
                  `;
            // tr.appendChild(createTD(`<span class="days w3-center w3-block">${dayLeft}</span>`));
        } else {
            return `
                    ${moment
                        .unix(subscriptionInfo.current_period_start)
                        .format('DD.MM.YYYY')} - ${moment
                .unix(subscriptionInfo.current_period_end)
                .format('DD.MM.YYYY')}
                    
                `;
        }
    };

    const prepareDayLeft = () => {
        let dDiff = 0;
        const start = moment.unix(subscriptionInfo.current_period_end);
        const end = moment();
        const dayLeft = moment.duration(start.diff(end)).asDays().toFixed(0);
        if (subscriptionInfo.trial_end && subscriptionInfo.status != 'active') {
            return dayLeft;
        } else {
            const a = moment();
            const b = moment(moment.unix(subscriptionInfo.current_period_end).format('YYYY-MM-DD'));
            dDiff = b.diff(a, 'days');
            return dDiff < 0 ? `expired ${-dDiff} days ago` : dDiff;
        }
    };

    return (
        <>
            <Head>
                <title>Amadeo CRM - Subscription Plan</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="block-white-8 mr-10 white-shadow-big">
                <div className="page-title">
                    <h1>Subscription Plan</h1>
                    <div className="clear-both" />
                </div>
            </div>
            <div className="mt-10 block-white-8 white-shadow-big">
                <div className={`w-1/5`}>
                    <Elements options={options} stripe={stripePromise}>
                        <CardForm />
                    </Elements>
                </div>
                {subscriptionInfo && (
                    <div className="overflow-x-scroll">
                        <table className="w-full float-table">
                            <thead>
                                <tr>
                                    <th style={{ textAlign: 'left' }}>Id</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Period</th>
                                    <th>Days left</th>
                                    <th>&nbsp;</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>{subscriptionInfo.id}</td>
                                    <td style={{ textAlign: 'center' }}>
                                        <span className={`${subscriptionInfo.status}-subscription`}>
                                            {subscriptionInfo.status}
                                        </span>
                                    </td>
                                    <td style={{ textAlign: 'center' }}>
                                        {moment.unix(subscriptionInfo.created).format('DD.MM.YYYY')}
                                    </td>
                                    <td style={{ textAlign: 'center' }}>{preparePeriod()}</td>
                                    <td style={{ textAlign: 'center' }}>{prepareDayLeft()}</td>
                                    <td style={{ textAlign: 'center' }}>
                                        <span
                                            role="presentation"
                                            className="cursor-pointer border border-gray-300 text-gray-300 py-1.5 rounded-lg px-1"
                                            onClick={() => {
                                                dispatch(unsubscribeAction());
                                            }}>
                                            Unsubscribe
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                )}
            </div>
        </>
    );
}

export async function getServerSideProps(context: any) {
    const { locale } = context;
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: { destination: `/${locale === 'fr' ? '' : `${locale}/`}auth/signin` }
        };
    }

    return {
        props: {
            session,
            locale,
            messages: {
                ...require(`../../../messages/${locale}.json`)
            }
        }
    };
}
