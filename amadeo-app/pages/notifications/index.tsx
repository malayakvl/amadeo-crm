import Head from 'next/head';
import React, { useCallback } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getSession } from 'next-auth/client';
import { DataPagination } from '../../components/_common';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import { PaginationType } from '../../constants';
import { fetchNotificationsAction } from '../../redux/notifications';
import {
    notififcationsCountSelector,
    paginatedNoticeSelector
} from '../../redux/notifications/selectors';
import { CogIcon } from '@heroicons/react/solid';
import moment from 'moment';
import { baseApiUrl } from '../../constants';

export default function Index() {
    const t = useTranslations();
    const dispatch = useDispatch();

    const count = useSelector(notififcationsCountSelector);
    const items = useSelector(paginatedNoticeSelector);

    const sendRequest = useCallback(() => {
        return dispatch(fetchNotificationsAction());
    }, [dispatch]);

    return (
        <>
            <Head>
                <title>Amadeo CRM - Personal Information</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="page-title">
                <h1>{t('Notifications')}</h1>
            </div>
            <div className="block-white-8 mr-10">
                <h2 className="page-subtitle">Today</h2>
                {items?.map((notice: Notifications.Notification) => (
                    <div key={notice.id} className="notice-item">
                        <div className="notice-photo">
                            {(notice.type === 'system' || !notice.sender_photo) && (
                                <CogIcon className="border rounded-full" width={24} height={24} />
                            )}
                            {notice.sender_photo && (
                                <Image
                                    className="border rounded-full"
                                    alt=""
                                    width={24}
                                    height={24}
                                    src={baseApiUrl + notice.sender_photo}
                                    layout="fixed"
                                />
                            )}
                        </div>
                        <div className="notice-text">
                            <div className="notice-row">
                                <div className="text-xs font-bold">
                                    <span className="subject">{notice.subject}</span>
                                    {notice.sender_first_name && (
                                        <span className="text-gray-350">
                                            {notice.sender_first_name} {notice.sender_last_name}
                                        </span>
                                    )}
                                    {!notice.sender_first_name && (
                                        <span className="text-gray-350">{t('system')}</span>
                                    )}
                                    <span className="text-gray-450">{notice.message}</span>
                                    <span className="text-gray-180">
                                        {moment(notice.created_at).fromNow()}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
                <div className="flex">
                    <DataPagination
                        paginationType={PaginationType.NOTIFICATIONS}
                        totalAmount={count}
                        sendRequest={sendRequest}
                    />
                </div>
            </div>
        </>
    );
}

export async function getServerSideProps(context: any) {
    const { locale } = context;
    const session = await getSession(context);

    if (!session) {
        return {
            redirect: { destination: `/${locale === 'fr' ? '' : `${locale}/`}auth/signin` }
        };
    }

    return {
        props: {
            session,
            locale,
            messages: {
                ...require(`../../messages/${locale}.json`)
            }
        }
    };
}
